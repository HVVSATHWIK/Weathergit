/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./open.js":
/*!*****************!*\
  !*** ./open.js ***!
  \*****************/
/***/ (() => {

eval("document.addEventListener('DOMContentLoaded', function () {\n  const viewer = new Cesium.Viewer('cesiumContainer', {\n    imageryProvider: new Cesium.OpenStreetMapImageryProvider({\n      url: 'https://a.tile.openstreetmap.org/'\n    }),\n    baseLayerPicker: false,\n    timeline: false,\n    animation: false\n  });\n  viewer.scene.globe.enableLighting = true;\n  viewer.scene.requestRenderMode = true;\n  viewer.scene.maximumRenderTimeChange = Infinity;\n  const weatherInfo = document.getElementById('weather-info');\n  const temperature = document.getElementById('temperature');\n  const humidity = document.getElementById('humidity');\n  const windSpeed = document.getElementById('wind-speed');\n  const condition = document.getElementById('condition');\n  const forecast = document.getElementById('forecast');\n  const timeDate = document.getElementById('time-date');\n\n  // Access environment variables\n  const apiKey = \"82e5b9470eddec6872539808d8d55566\";\n  const geminiApiKey = \"AIzaSyCULCaTlZ5ke1c5j3uTL6VIGRLE9lVLKX8\";\n  console.log('Weather API Key:', apiKey);\n  console.log('Gemini API Key:', geminiApiKey);\n  let cesiumBillboard;\n  function updateWeatherInfo(data) {\n    temperature.textContent = `Temperature: ${data.main.temp}°C`;\n    humidity.textContent = `Humidity: ${data.main.humidity}%`;\n    windSpeed.textContent = `Wind Speed: ${data.wind.speed} m/s`;\n    condition.textContent = `Condition: ${data.weather[0].description}`;\n    timeDate.textContent = `Time & Date: ${new Date().toLocaleString()}`;\n    weatherInfo.style.display = 'block';\n  }\n  async function fetchWithRetry(url, options, retries = 3, delay = 2000) {\n    for (let i = 0; i < retries; i++) {\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n          if (response.status === 503 && i < retries - 1) {\n            await new Promise(resolve => setTimeout(resolve, delay));\n          } else {\n            throw new Error(`Request failed with status ${response.status}`);\n          }\n        } else {\n          return await response.json();\n        }\n      } catch (error) {\n        if (i === retries - 1) throw error;\n      }\n    }\n  }\n  async function fetchWeather(lat, lon) {\n    try {\n      const weatherResponse = await fetch(`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`);\n      const weatherData = await weatherResponse.json();\n      updateWeatherInfo(weatherData);\n      const aiData = await fetchWithRetry(`https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash-latest:generateContent?key=${geminiApiKey}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"contents\": [{\n            \"parts\": [{\n              \"text\": `Based on the weather conditions - Temperature: ${weatherData.main.temp}°C, Humidity: ${weatherData.main.humidity}%, Wind Speed: ${weatherData.wind.speed} m/s, Condition: ${weatherData.weather[0].description} - is it advisable to go outside?`\n            }]\n          }]\n        })\n      });\n      console.log(aiData);\n      if (aiData.choices && aiData.choices.length > 0) {\n        const advice = aiData.choices[0].text.trim();\n        forecast.textContent = `AI Advice: ${advice}`;\n      } else {\n        forecast.textContent = 'AI Advice: No advice available at the moment or The server is too busy at the moment';\n      }\n      const speech = new SpeechSynthesisUtterance(forecast.textContent);\n      speech.lang = 'en-US';\n      speech.pitch = 1;\n      speech.rate = 1;\n      window.speechSynthesis.speak(speech);\n    } catch (error) {\n      handleError('Error fetching weather data or AI advice:', error);\n    }\n  }\n  async function searchLocation() {\n    const location = document.getElementById('location-input').value;\n    if (!location) {\n      handleError('You need to provide a location first.');\n      return;\n    }\n    try {\n      const response = await fetch(`https://nominatim.openstreetmap.org/search?format=json&q=${location}`);\n      const data = await response.json();\n      if (data.length > 0) {\n        const {\n          lat,\n          lon\n        } = data[0];\n        viewer.camera.flyTo({\n          destination: Cesium.Cartesian3.fromDegrees(lon, lat, 1000000)\n        });\n        if (cesiumBillboard) viewer.entities.remove(cesiumBillboard);\n        cesiumBillboard = viewer.entities.add({\n          position: Cesium.Cartesian3.fromDegrees(lon, lat),\n          billboard: {\n            image: 'https://cdn.pixabay.com/photo/2015/12/14/20/30/location-1093169_1280.png',\n            width: 32,\n            height: 32\n          }\n        });\n        fetchWeather(lat, lon);\n      } else {\n        handleError('Location not found!');\n      }\n    } catch (error) {\n      handleError('Error searching for location:', error);\n    }\n  }\n  function handleError(message, error) {\n    console.error(message, error);\n    const speech = new SpeechSynthesisUtterance(message);\n    speech.lang = 'en-US';\n    speech.pitch = 1;\n    speech.rate = 1;\n    window.speechSynthesis.speak(speech);\n    const feedback = document.createElement('div');\n    feedback.classList.add('feedback');\n    feedback.textContent = message;\n    document.body.appendChild(feedback);\n    setTimeout(() => feedback.remove(), 3000);\n  }\n  document.getElementById('search-button').addEventListener('click', searchLocation);\n  document.getElementById('location-input').addEventListener('keypress', e => {\n    if (e.key === 'Enter') {\n      searchLocation();\n    }\n  });\n  document.getElementById('satelliteButton').addEventListener('click', () => {\n    viewer.imageryLayers.removeAll();\n    viewer.imageryLayers.addImageryProvider(new Cesium.OpenStreetMapImageryProvider({\n      url: 'https://a.tile.openstreetmap.org/'\n    }));\n  });\n});\n\n//# sourceURL=webpack:///./open.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./open.js"]();
/******/ 	
/******/ })()
;